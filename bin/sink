#!/usr/bin/env ruby

require "rubygems"
require "bundler"
Bundler.setup
require "statsample"
require "fraggle"

$stdout.sync = true

abort("sink [verbose]") if (ARGV.size > 1)
verbose = !!ARGV[0]
latencies = []

EM.run do
  client = Fraggle.connect
  sent = 0
  received = 0
  start = Time.now
  client.rev do |res|
    at_rev = res.rev
    walk1 = Proc.new do |offset|
      sent += 1
      sent_at = Time.now
      $stdout.puts("sent=#{sent}") if verbose
      client.walk(at_rev, "/**", offset) do |res|
        if res.err_code == 8
          elapsed = Time.now - start
          vector = latencies.to_scale
          $stdout.puts
          $stdout.puts("received=#{received}")
          $stdout.puts("elapsed=#{elapsed}")
          $stdout.puts("rate=#{received / elapsed}")
          $stdout.puts("mean=#{vector.mean}")
          $stdout.puts("sd=#{vector.sd}")
          $stdout.puts("perc90=#{vector.percentil(90)}")
          $stdout.puts("perc99=#{vector.percentil(99)}")
          EM.stop
        else
          received += 1
          received_at = Time.now
          latency = received_at - sent_at
          latencies << latency
          if verbose
            $stdout.puts("received=#{received} ok=#{res.ok?} rev=#{res.rev} latency=#{latency}")
          else
            $stdout.print(".") if (received % 100 == 0)
          end
          walk1.call(offset+1)
        end
      end
    end
    walk1.call(0)
  end
end
